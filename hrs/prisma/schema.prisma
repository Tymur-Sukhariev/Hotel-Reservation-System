

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}



model Users {
  id            Int      @id @default(autoincrement())
  firstName     String
  lastName      String
  email         String   @unique
  passwordHash  String
  role          Role     @default(USER)
  
  sessions      Sessions[]
  bookings      Bookings[]
  resetTokens   ResetPasswordTokens[]
  reviews       Reviews[]
}

model Sessions {
  id        Int      @id @default(autoincrement())
  token     String   @default(cuid()) @unique
  userId    Int
  user      Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Bookings {
  id          Int      @id @default(autoincrement())
  bookingNumber Int @unique
  roomId      Int
  userId      Int
  checkIn     DateTime
  checkOut    DateTime
  totalPrice  Float
  
  room        Rooms    @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user        Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Rooms {
  id          Int      @id
  priceId     Int
  guests      Int
  typeId      Int
  booked      Int      @default(0) // How many times the room has been booked

  type        Types    @relation(fields: [typeId], references: [id], onDelete: Cascade)
  price       RoomPrices @relation(fields: [priceId], references: [id], onDelete: Cascade)
  facilities  Facilities?
  bookings    Bookings[]
}

model Types {
  id          Int      @id @default(autoincrement())
  type        String
  comfort     String // Options: "Standard", "Comfort"
  previewText String
  description String

  rooms       Rooms[]
  images      RoomImages[]
}

model Facilities {
  id       Int  @id @default(autoincrement())
  roomId   Int  @unique // Each room has one set of facilities
  tv       Boolean
  ac       Boolean
  bath     Boolean

  room     Rooms @relation(fields: [roomId], references: [id], onDelete: Cascade)
}

model RoomImages {
  id       Int    @id @default(autoincrement())
  typeId   Int
  imageUrl String
  order    Int

  type     Types  @relation(fields: [typeId], references: [id], onDelete: Cascade)
}

model RoomPrices {
  id       Int     @id @default(autoincrement())
  price    Float
  rooms    Rooms[]
}

enum Role {
  ADMIN
  USER
}

model ResetPasswordTokens{
  id       Int     @id @default(autoincrement())
  userId   Int     
  token    String  @default(cuid()) @unique
  createdAt DateTime @default(now())

  user     Users   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Reviews {
  id          Int      @id @default(autoincrement()) 
  userId      Int                                     
  rate        Int                                     
  text        String                                  
  createdAt   DateTime @default(now())                

  user        Users     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


